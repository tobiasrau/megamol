#
# MegaMolâ„¢ adios_plugin Plugin
# Copyright 2017, by MegaMol Team
# Alle Rechte vorbehalten. All rights reserved.
#
string(TOUPPER adios_plugin EXPORT_NAME)
option(BUILD_${EXPORT_NAME}_PLUGIN "Option to build adios_plugin" OFF)

if(BUILD_${EXPORT_NAME}_PLUGIN)
  project(adios_plugin)

  # Check option dependencies: First list item is always the current build option,
  # afterwards list the dependencies.
  set(DEP_LIST "${DEP_LIST};BUILD_${EXPORT_NAME}_PLUGIN BUILD_CORE BUILD_MMSTD_DATATOOLS_PLUGIN" CACHE INTERNAL "")

  require_external(bzip2)
  get_target_property(bzip2_include_dir bzip2 INCLUDE_DIR)
  get_target_property(bzip2_library bzip2 IMPORT_LIBRARY)
  require_external(zfp)
  get_target_property(zfp_include_dir zfp INCLUDE_DIR)
  get_target_property(zfp_library zfp LIBRARY)

  message(STATUS "${bzip2_include_dir}")
  message(STATUS "${bzip2_library}")
  message(STATUS "${zfp_include_dir}")
  message(STATUS "${zfp_library}")


  option(USE_EXTERNAL_ADIOS "Option to use external ADIOS2" OFF)
  if (USE_EXTERNAL_ADIOS)
    find_package(ADIOS2 REQUIRED)
  else()
    if(WIN32)
      set(ADIOS2_IMPORT_LIB "lib/adios2.lib")
      set(ADIOS2_LIB "bin/adios2.dll")
    else()
      include(GNUInstallDirs)
      set(ADIOS2_IMPORT_LIB "${CMAKE_INSTALL_LIBDIR}/libadios2.so")
      set(ADIOS2_LIB "${CMAKE_INSTALL_LIBDIR}/libadios2.so")
    endif()

    add_external_project(adios2_ext
      GIT_REPOSITORY https://github.com/ornladios/ADIOS2.git
      GIT_TAG "v2.4.0"
      BUILD_BYPRODUCTS "<INSTALL_DIR>/${ADIOS2_IMPORT_LIB}"
      CMAKE_ARGS 
        -DBUILD_TESTING=OFF -DADIOS2_USE_BZip2=OFF 
        -DADIOS2_USE_Fortran=OFF -DADIOS2_USE_HDF5=OFF 
        -DADIOS2_USE_Python=OFF -DADIOS2_USE_SST=OFF 
        -DADIOS2_USE_SZ=OFF -DADIOS2_USE_SysVShMem=OFF 
        -DADIOS2_USE_ZFP=OFF -DADIOS2_USE_ZeroMQ=OFF 
        -DMPI_GUESS_LIBRARY_NAME=${MPI_GUESS_LIBRARY_NAME})
    add_external_library(adios2 SHARED
      DEPENDS adios2_ext zfp bzip2
      IMPORT_LIBRARY ${ADIOS2_IMPORT_LIB}
      LIBRARY ${ADIOS2_LIB})
  endif()

  # Collect source files
  file(GLOB_RECURSE public_header_files RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "include/*.h")
  file(GLOB_RECURSE source_files RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/*.cpp")
  file(GLOB_RECURSE header_files RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "src/*.h")

  # Target definition
  add_library(${PROJECT_NAME} SHARED ${public_header_files} ${header_files} ${source_files})
  set_target_properties(${PROJECT_NAME} PROPERTIES SUFFIX ".mmplg")
  target_compile_definitions(${PROJECT_NAME} PRIVATE ${EXPORT_NAME}_EXPORTS)
  target_link_libraries(${PROJECT_NAME} PRIVATE core mmstd_datatools)
  target_include_directories(${PROJECT_NAME} PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include> "include" "src")

  if(USE_EXTERNAL_ADIOS)
    target_link_libraries(${PROJECT_NAME} PRIVATE adios2::adios2)
  else()
    target_link_libraries(${PROJECT_NAME} PRIVATE adios2)
  endif()

  if(MPI_C_FOUND)
    target_link_libraries(${PROJECT_NAME} PRIVATE MPI::MPI_C)
  endif()

  # Installation rules for generated files
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/include/ DESTINATION "include")
  if(NOT USE_EXTERNAL_ADIOS)
    install_external(TARGETS adios2)
  endif()
  if(WIN32)
    install(TARGETS ${PROJECT_NAME} RUNTIME DESTINATION "bin")
    install(TARGETS ${PROJECT_NAME} ARCHIVE DESTINATION "lib")
  else()
    install(TARGETS ${PROJECT_NAME} DESTINATION "lib" EXPORT ${PROJECT_NAME}-target)
  endif()

  # Grouping in Visual Studio
  foreach(FILE_NAME ${source_files})
    get_filename_component(FILE_PATH ${FILE_NAME} PATH)
    string(REPLACE "/" "\\" GROUP_NAME ${FILE_PATH})
    string(REGEX REPLACE "^src" "Source Files" GROUP_NAME ${GROUP_NAME})
    source_group(${GROUP_NAME} FILES ${FILE_NAME})
  endforeach()
  foreach(FILE_NAME ${header_files})
    get_filename_component(FILE_PATH ${FILE_NAME} PATH)
    string(REPLACE "/" "\\" GROUP_NAME ${FILE_PATH})
    string(REGEX REPLACE "^src" "Header Files" GROUP_NAME ${GROUP_NAME})
    source_group(${GROUP_NAME} FILES ${FILE_NAME})
  endforeach()
  foreach(FILE_NAME ${public_header_files})
    get_filename_component(FILE_PATH ${FILE_NAME} PATH)
    string(REPLACE "/" "\\" GROUP_NAME ${FILE_PATH})
    string(REGEX REPLACE "^include\\\\adios_plugin" "Public Header Files" GROUP_NAME ${GROUP_NAME})
    source_group(${GROUP_NAME} FILES ${FILE_NAME})
  endforeach()

  set_target_properties(${PROJECT_NAME} PROPERTIES FOLDER plugins)
endif(BUILD_${EXPORT_NAME}_PLUGIN)
